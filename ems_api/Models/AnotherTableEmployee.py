from django.db import models
from django.utils import timezone
class AnotherTableEmployee(models.Model):
    local_employee_id = models.CharField(max_length=50 , primary_key=True)
    global_group_id = models.CharField(max_length=150 , blank=True, null=True)
    name = models.CharField(max_length=150 , blank=True, null=True)
    local_grade = models.CharField(max_length=150 , blank=True, null=True)
    role_name = models.CharField(max_length=150 , blank=True, null=True)
    production_unit = models.CharField(max_length=150 , blank=True, null=True)
    production_unit_name = models.CharField(max_length=150 , blank=True, null=True)
    local_approver = models.CharField(max_length=150 , blank=True, null=True)
    people_manager = models.CharField(max_length=150 , blank=True, null=True)
    project_code = models.CharField(max_length=150 , blank=True, null=True)
    project_name = models.CharField(max_length=150 , blank=True, null=True)
    client_group_name = models.CharField(max_length=150 , blank=True, null=True)
    start_date = models.CharField(max_length=150 , blank=True, null=True)
    end_date = models.CharField(max_length=150 , blank=True, null=True)
    # loading = models.CharField(max_length=150 , blank=True, null=True)
    # leavers_last_working_day = models.CharField(max_length=150 , blank=True, null=True)
    type_of_project = models.CharField(max_length=150 , blank=True, null=True)
    # category = models.CharField(max_length=150 , blank=True, null=True)
    base_location = models.CharField(max_length=150 , blank=True, null=True)
    production_unit_rm_name = models.CharField(max_length=150 , blank=True, null=True)
    resource_practice_area = models.CharField(max_length=150 , blank=True, null=True)
    booking_type = models.CharField(max_length=150 , blank=True, null=True)
    joining_date_dhr = models.CharField(max_length=150 , blank=True, null=True)
    final_client_name = models.CharField(max_length=150 , blank=True, null=True)
    city = models.CharField(max_length=150 , blank=True, null=True)
    # mm = models.CharField(max_length=150 , blank=True, null=True)
    engineering_unit = models.CharField(max_length=150 , blank=True, null=True)
    cluster = models.CharField(max_length=150 , blank=True, null=True)
    el_mapping = models.CharField(max_length=150 , blank=True, null=True)
    billability = models.CharField(max_length=150 , blank=True, null=True)
    employee_type = models.CharField(max_length=150 , blank=True, null=True)
    skill_group = models.CharField(max_length=150 , blank=True, null=True)
    # source = models.CharField(max_length=150 , blank=True, null=True)
    mapped_grade = models.CharField(max_length=150 , blank=True, null=True)
    final_grade = models.CharField(max_length=150 , blank=True, null=True)
    # category = models.CharField(max_length=150 , blank=True, null=True)
    vertical_segment = models.CharField(max_length=150 , blank=True, null=True)
    # target_billing_date = models.CharField(max_length=150 , blank=True, null=True)
    # target_customer = models.CharField(max_length=150 , blank=True, null=True)
    # new_requirement_backfill = models.CharField(max_length=150 , blank=True, null=True)
    # manual_allocation_category = models.CharField(max_length=150 , blank=True, null=True)
    # edm_mapping = models.CharField(max_length=150 , blank=True, null=True)
    # bu_manual_change = models.CharField(max_length=150 , blank=True, null=True)
    resignation_status = models.CharField(max_length=150 , blank=True, null=True)
    # account_holder = models.CharField(max_length=150 , blank=True, null=True)
    ego = models.CharField(max_length=150 , blank=True, null=True)
    # new_entries_spe = models.CharField(max_length=150 , blank=True, null=True)
    udaan_batch = models.CharField(max_length=150 , blank=True, null=True)
    udaan_status = models.CharField(max_length=150 , blank=True, null=True)
    non_deployable = models.CharField(max_length=150 , blank=True, null=True)
    email_id = models.EmailField(blank=True, null=True)
    createdAt = models.DateTimeField(default=timezone.localtime)
    updatedAt = models.DateTimeField(default=timezone.localtime)

    def save(self, *args, **kwargs):
        self.updatedAt = timezone.now()
        return super().save(*args, **kwargs)